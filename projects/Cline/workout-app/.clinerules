# Project Configuration

## Tech Stack
- Next.js 14+ with App Router
- Tailwind CSS for styling
- Supabase for backend
- Vercel for deployment
- GitHub for version control

## Project Structure
/src
  /app         # Next.js App Router pages
  /components  # React components
  /lib         # Utility functions
  /types       # TypeScript types
/supabase
  /migrations  # SQL migration files
  /seed        # Seed data files
/public        # Static assets

## Database Migrations
SQL files in /supabase/migrations should:
- Use sequential numbering: 001, 002, etc.
- Include descriptive names
- Be reviewed by Cline before execution
Example: 001_create_users_table.sql
- Always create a new migration file for database schema changes. Never modify existing migration files.
- Before pushing database changes, carefully review the schema and foreign key constraints to ensure they are correct.

## Development Workflow
- Cline helps write and review code changes
- Vercel automatically deploys from main branch
- Database migrations reviewed by Cline before execution
- Pay close attention to UI feedback from the user and address it promptly.
- Before completing a task, thoroughly test the UI to ensure that all elements are displayed correctly and that all functionalities are working as expected.
- After making changes, always test the application to ensure that all functionalities are working as expected.
- Before completing a task, verify that all acceptance criteria have been met.
- After completing a task, list up the mistakes we made and what we can learn from them.
- Memory bank files should be reviewed and updated when discovering new project patterns, after implementing significant changes, when the user requests with "update memory bank", and when context needs clarification.

## Commit Description Guidelines
Commit description should:
- Suggested before committing changes
- Be a bullet list.
- Start with a verb.
- Not use "I" or "We".

Commit message should:
- Be a single line.
- Be created from the commit description.

## Commit Message Example
- feat: Add user profile page
- style: Update user profile page layout
- fix: Fix user profile page layout
- refactor: Improve code readability in user authentication
- docs: Update API documentation for user profile
- test: Add unit tests for user registration
- chore: Update dependencies
- perf: Improve loading speed of user profile page
- ci: Configure CI/CD pipeline

# Security

## Sensitive Files

DO NOT read or modify:

-   .env files
-   *_/config/secrets.*
-   *_/*.pem
-   Any file containing API keys, tokens, or credentials

## Security Practices

-   Never commit sensitive files
-   Use environment variables for secrets
-   Keep credentials out of logs and output

# Project Guidelines

## Documentation Requirements

-   Update relevant documentation in /docs when modifying features
-   Keep README.md in sync with new capabilities
-   Maintain changelog entries in CHANGELOG.md

## Architecture Decision Records

Create ADRs in memory-bank/adr for:

-   Major dependency changes
-   Architectural pattern changes
-   New integration patterns
-   Database schema changes
    Follow template in memory-bank/adr/template.md

## Code Style & Patterns

-   Generate API clients using OpenAPI Generator
-   Use TypeScript axios template
-   Place generated code in /src/generated
-   Prefer composition over inheritance
-   Use repository pattern for data access
-   Follow error handling pattern in /src/utils/errors.ts

## Testing Standards

-   Unit tests required for business logic
-   Integration tests for API endpoints
-   E2E tests for critical user flows

## React.FC

We don't need to use `React.FC` in our components. See https://fettblog.eu/typescript-react-why-i-dont-use-react-fc/ for more information.

# Before updating .clinerules

Before updating `.clinerules`, we should care about:

-   Understanding the existing rules: We need to understand the existing rules in `.clinerules` to avoid duplication and ensure that the new rules are consistent with the existing rules.
-   Understanding the problem: We need to understand the problem that we are trying to solve by updating `.clinerules`.
-   Keeping it simple: We need to keep the rules simple and easy to understand.
-   Avoiding duplication: We need to avoid duplicating existing rules.
-   Following instructions: We need to follow the instructions carefully.
-   Getting approval: We need to get the user's approval before updating `.clinerules`.

# Error Prevention

-   Validate database interaction logic with the user before implementation.
-   Ensure a thorough understanding of data structures and relationships before writing database queries.
-   Ensure the proposed solution and implementation plan are explicitly approved by the user before switching to ACT MODE.
-   Understand the problem thoroughly: Read the error message carefully, examine the code, and understand the data flow.
-   Read file content carefully: When using the `replace_in_file` tool, make sure the SEARCH block matches the content in the file exactly.
-   Understand the data flow: Before making changes to the code, make sure you understand the data flow.
-   Pay attention to user feedback: If the user denies a change, try to understand why they are denying the change.
-   Follow instructions: Make sure you follow the instructions carefully.

# Styling Guidelines

-   When modifying CSS, avoid duplicating existing imports or declarations. Review the file content before adding new styles.
