.global _start
.align 2

_start:
    mov X3, #9 // カウントダウンの初期値

loop:
    add X0, X3, #'0' // X3の値に文字'0'の ASCII コード(48) を加算してX0に代入
    mov W1, W0 // 32ビットの W0 レジスタの値を 32ビットの W1 レジスタにコピー
    strb W1, [sp] // W1 の下位 8 ビットをスタックポインタの指すメモリアドレスにストア

    mov X0, #1 // レジスタX0に1を代入 標準出力 writeシステムコールの第1引数に渡す
    mov X1, sp // レジスタX1にスタックポインタの値を代入 writeシステムコールの第2引数に渡す
    mov X2, #1 // レジスタX2に1を代入 表示したい文字列の長さ。改行コードを1文字としてカウントする writeシステムコールの第3引数に渡す
    mov X16, #4 // レジスタX16に4を代入 writeシステムコールのシステムコール番号を代入
    svc #0x80 // Supervisor Callを実行

    sub X3, X3, #1 // カウントダウン

    cbnz X3, loop // X3が0でない場合、loopにジャンプ

end:
    mov X0, #0 // レジスタX0に0を代入 終了コードを0にする
    mov X16, #1 // レジスタX16に1を代入 exitシステムコールのシステムコール番号を代入
    svc #0x80 // Supervisor Callを実行
