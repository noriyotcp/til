.global _start
.align 2

_start:
    mov X0, #2024 // 分割する文字
    mov X2, #10   // 割るときの分母

convert_loop:
    udiv X3, X0, X2     // 2024 / 10 = 202
    msub X4, X3, X2, X0 // 2024 - (202 * 10) = 2024 - 2020 = 4
    add X4, X4, #'0'    // その結果 4 に '0' を加算して '4' に変換

    strb W4, [sp] // W4 の下位8ビットを スタックポインタの指すアドレスにストア

    mov X0, X3            // 次のループ処理に備えて計算結果を更新
    cbnz X3, convert_loop // X3 がゼロでなければラベルが示すアドレスにジャンプ

print_string:
    mov X0, #1 // レジスタX0に1（文字列の「出力」）を代入
    mov X2, #1 // レジスタX2に1（文字列の長さ）を代入
    mov X16, #4 // レジスタX16に4（write システムコール番号）を代入
    svc #0x80 // Supervisor コール命令でシステムコールを実行

end:
    mov X0, #0 // レジスタX0に0（プログラムの終了コード）を代入
    mov X16, #1 // レジスタX16に1（exit システムコール番号）を代入
    svc #0x80 // Supervisor コール命令でシステムコールを実行
