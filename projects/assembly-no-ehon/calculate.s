.global _start
.align 2

_start:
    mov X0, #5 // レジスタX0に5を代入
    mov X1, #4 // レジスタX1に4を代入
    add X2, X0, X1 // レジスタX2にレジスタX0とレジスタX1の和を代入
    add X2, X2, #'0' // レジスタX2の値に文字 '0' のASCII コード(48)を加算

    mov W3, W2 // 32bit の W2 レジスタの値を W3 レジスタにコピー
    strb W3, [sp] // W3 の下位8ビットを スタックポインタの指すアドレスにストア

    mov X0, #1 // レジスタX0に1（文字列の「出力」）を代入
    mov X1, sp // スタックポインタの値をレジスタX1に代入
    mov X2, #1 // レジスタX2に1（文字列の長さ）を代入
    mov X16, #4 // レジスタX16に4（write システムコール番号）を代入
    svc #0x80 // Supervisor コール命令でシステムコールを実行

    mov X0, #0 // レジスタX0に0（プログラムの終了コード）を代入
    mov X16, #1 // レジスタX16に1（exit システムコール番号）を代入
    svc #0x80 // Supervisor コール命令でシステムコールを実行
